{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleredMode","htmlFor","togglegreenMode","toggleMode","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","text_in_box","document","getElementById","select","navigator","clipboard","writeText","split","join","length","prototype","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","role","word","lower","charAt","slice","captilize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.60c2c715.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//import {Link} from \"react-router-dom\";       //{repace a tag with link tag and replace href with \"to\" to use react routing}\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/*<Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n  </Link>*/}\r\n  <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"/navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/*<Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n</Link>*/}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/*<Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n</Link>*/}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n  </form>*/}\r\n          <div\r\n            className={`mx-3 form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleredMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Red Dark Mode\r\n            </label>\r\n          </div>\r\n          <div\r\n            className={`mx-3 form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.togglegreenMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Green Dark Mode\r\n            </label>\r\n          </div>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.prototype = {\r\n  // proptype is type props(arguments)\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Default title\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText); //here we are changing the state variable text\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  };\r\n\r\n\r\n  const handlelowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  };\r\n\r\n  const cleartext = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared!\", \"success\");\r\n  };\r\n\r\n  const copytext = () => {\r\n    var text_in_box = document.getElementById(\"myBox\");\r\n    //  console.log(text_in_box);\r\n    text_in_box.select();\r\n    navigator.clipboard.writeText(text_in_box.value);\r\n    props.showAlert(\"Copied to clipboard!\", \"success\");\r\n  };\r\n\r\n  const handelExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra space removed!\", \"success\");\r\n  };\r\n\r\n  const handelOnChange = (event) => {\r\n    /*\r\n         when we write something in this form its value \r\n         get assigned to state variable text by using \r\n          setText(event.target.value) \r\n        */\r\n    setText(event.target.value);\r\n  };\r\n  /*\r\n    to update text in state we cant use text=\"new text\" we have to\r\n    use function setText...eg..settext(\"new text\")\r\n    */\r\n  const [text, setText] = useState(\"\");\r\n  //setText(\"New Texttttt\");\r\n  // console.log(useState(\"Enter text here2\"))\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handelOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert To Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handlelowClick}>\r\n          Convert To Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={cleartext}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={copytext}>\r\n          copy Text\r\n        </button>\r\n\r\n        <button className=\"btn btn-primary mx-2\" onClick={handelExtraSpaces}>\r\n          Remove Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {text.split(\" \").length - 1} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n/* we are using state variable inside the text area so we need to\r\n  use onChange event to change the state of state variable which will be shown inside\r\n  the textarea\r\n*/\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const captilize = (word)=>{\r\n       const lower = word.toLowerCase();\r\n       return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div\r\n      className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n      role=\"alert\"\r\n    >\r\n      <strong>{captilize(props.alert.type)}</strong>: {props.alert.msg}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\n//import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n//import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode has been enable\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enable\", \"success\");\n    }\n  };\n  const togglegreenMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#3E6245\";\n      showAlert(\"Dark mode has been enable\", \"success\");\n    } else {\n      setMode(\"light\");\n\n      document.body.style.backgroundColor = \"white\";\n\n      showAlert(\"Light mode has been enable\", \"success\");\n    }\n  };\n\n  const toggleredMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#942A2A\";\n      showAlert(\"Dark mode has been enable\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enable\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      {/*<Router>*/}\n      <Navbar\n        title=\"TextUtils\"\n        mode={mode}\n        toggleMode={toggleMode}\n        togglegreenMode={togglegreenMode}\n        toggleredMode={toggleredMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/*<Switch>*/}\n        {/* <Route exact path=\"/about\">\n            <About />\n  </Route>*/}\n        {/*\n           always use exact keyword as react do partial \n           matching e.g  /users--> Component 1\n           /users/home--> Component 2\n          \n            without exact , react router always render Component 1\n            if we goto  /users/{anything}\n\n         */}\n        {/*<Route exact path=\"/\">*/}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text to analyze\"\n          mode={mode}\n        />\n        {/*</Route>*/}\n        {/*</Switch>*/}\n      </div>\n      {/*</Router>*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}